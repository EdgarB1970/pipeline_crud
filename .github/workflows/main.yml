name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

env:
  # Variables compartidas por todos los jobs
  APP_NAME: ${{ github.event.repository.name }}
  APP_VERSION: ${{ github.sha }}
  KUBE_NAMESPACE: ${{ github.event.repository.name }}-${{ github.ref_name }}
  CI_REGISTRY_IMAGE: docker.pkg.github.com/${{ github.repository }}

jobs:
  # Job de validaci贸n (Maven)
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Validate code
        run: mvn --batch-mode validate compile

  # Job de pruebas unitarias
  test-unit:
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Run unit tests
        run: mvn --batch-mode test -Dtest="*Unit*"
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: target/surefire-reports

  # Job de pruebas de integraci贸n
  test-integration:
    runs-on: ubuntu-latest
    needs: [test-unit]
    services:
      redis:
        image: redis:7-alpine
      kafka:
        image: confluentinc/cp-kafka:latest
      cassandra:
        image: cassandra:4.0
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Run integration tests
        run: mvn --batch-mode verify -Dtest="*Integration*"
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: target/failsafe-reports

  # Job de construcci贸n de la aplicaci贸n y la imagen Docker
  build:
    runs-on: ubuntu-latest
    needs: [test-integration]
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Configure Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up image name
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      - name: Build and push Docker image
        run: |
          mvn --batch-mode compile jib:build \
            -Djib.to.image=ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -Djib.to.auth.username=${{ github.actor }} \
            -Djib.to.auth.password=${{ secrets.GITHUB_TOKEN }}

  # Job de escaneo de seguridad con Trivy
  security-scan:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Set up image name
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      - name: Docker login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Docker image
        run: docker pull ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.22.0
        with:
          image-ref: ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          output: 'trivy-report.txt'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-report
          path: trivy-report.txt

  # Job de despliegue en Kubernetes (Minikube)
deploy-dev:
  runs-on: ubuntu-latest
  needs: [build]
  if: github.ref == 'refs/heads/master'
  steps:
    - uses: actions/checkout@v4
    - name: Install Minikube Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y conntrack
        curl -LO https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/crictl
        sudo install -o root -g root -m 0755 crictl /usr/local/bin/crictl
    - name: Install cri-dockerd
      run: |
        VERSION="0.3.11"
        curl -L -o cri-dockerd-${VERSION}.amd64.tgz https://github.com/Mirantis/cri-dockerd/releases/download/v${VERSION}/cri-dockerd-${VERSION}.amd64.tgz
        tar -xzf cri-dockerd-${VERSION}.amd64.tgz
        sudo install -o root -g root -m 0755 cri-dockerd/cri-dockerd /usr/local/bin/cri-dockerd
        sudo install -o root -g root -m 0755 cri-dockerd/cri-dockerd.service /etc/systemd/system/cri-dockerd.service
    - name: Install Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        minikube start --driver=none
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Use the Kube config
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        kubectl config use-context ${{ secrets.KUBE_CONTEXT }}
    - name: Wait for Kubernetes to be ready
      run: |
        kubectl wait --for=condition=ready pod -l app=minikube --timeout=300s
    - name: Deploy to Minikube
      run: |
        kubectl apply -f k8s/
    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/pipeline-crud