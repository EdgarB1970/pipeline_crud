name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

env:
  # Variables compartidas por todos los jobs
  APP_NAME: ${{ github.event.repository.name }}
  APP_VERSION: ${{ github.sha }}
  KUBE_NAMESPACE: ${{ github.event.repository.name }}-${{ github.ref_name }}
  CI_REGISTRY_IMAGE: docker.pkg.github.com/${{ github.repository }}

jobs:
  # Job de validación (Maven)
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Validate code
        run: mvn --batch-mode validate compile

  # Job de pruebas unitarias
  test-unit:
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Run unit tests
        run: mvn --batch-mode test -Dtest="*Unit*"
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: target/surefire-reports

  # Job de pruebas de integración
  test-integration:
    runs-on: ubuntu-latest
    needs: [test-unit]
    services:
      redis:
        image: redis:7-alpine
      kafka:
        image: confluentinc/cp-kafka:latest
      cassandra:
        image: cassandra:4.0
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Run integration tests
        run: mvn --batch-mode verify -Dtest="*Integration*"
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: target/failsafe-reports

  # Job de construcción de la aplicación y la imagen Docker
  build:
    runs-on: ubuntu-latest
    needs: [test-integration]
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Configure Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up image name
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      - name: Build and push Docker image
        run: |
          mvn --batch-mode compile jib:build \
            -Djib.to.image=ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -Djib.to.auth.username=${{ github.actor }} \
            -Djib.to.auth.password=${{ secrets.GITHUB_TOKEN }}

  # Job de escaneo de seguridad con Trivy
  security-scan:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Set up image name
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      - name: Docker login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Docker image
        run: docker pull ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.22.0
        with:
          image-ref: ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          output: 'trivy-report.txt'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-report
          path: trivy-report.txt

  # Job de despliegue en Kubernetes (Minikube)
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - name: Set up image name
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start Minikube
        uses: medyagh/setup-minikube@v0.0.16
        with:
          minikube-version: 1.32.0
          kubernetes-version: v1.28.0
          driver: docker

      - name: Deploy to Minikube
        run: |
          # Sustituir variables en los manifiestos K8s
          export IMAGE_NAME=ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          export KUBE_NAMESPACE=$(echo "${{ env.KUBE_NAMESPACE }}" | tr '_' '-')
          
          # La variable APP_NAME debe ser compatible con los nombres de recursos de Kubernetes
          export KUBE_APP_NAME=$(echo "${{ env.APP_NAME }}" | tr '[:upper:]' '[:lower:]' | tr -s '_' '-' | tr -s '.' '-')
          
          # Crear namespace
          kubectl create namespace $KUBE_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Aplicar manifiestos con substitución de variables
          envsubst < k8s/app-deployment.yml | kubectl apply -n $KUBE_NAMESPACE -f -
          envsubst < k8s/app-service.yml | kubectl apply -n $KUBE_NAMESPACE -f -
          
          # Esperar a que el deployment esté listo
          kubectl rollout status deployment/$KUBE_APP_NAME -n $KUBE_NAMESPACE --timeout=300s

      - name: Verify deployment
        run: |
          KUBE_NAMESPACE=$(echo "${{ env.KUBE_NAMESPACE }}" | tr '_' '-')
          kubectl get pods -n $KUBE_NAMESPACE
          kubectl get services -n $KUBE_NAMESPACE

      # Health check opcional
      - name: Health check
        run: |
          KUBE_NAMESPACE=$(echo "${{ env.KUBE_NAMESPACE }}" | tr '_' '-')
          kubectl wait --for=condition=ready pod -l app=$KUBE_APP_NAME -n $KUBE_NAMESPACE --timeout=300s
          echo "Deployment successful!"
